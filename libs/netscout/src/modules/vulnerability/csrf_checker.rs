use crate::models::{Target, Vulnerability};
use crate::utils::http_client::HttpClient;
use async_trait::async_trait;

pub struct CsrfChecker;

#[async_trait]
impl super::VulnerabilityCheck for CsrfChecker {
    async fn check(&self, target: &Target, client: &HttpClient) -> Vec<Vulnerability> {
        let mut vulnerabilities = Vec::new();

        // Fetch the main page
        let response = client.get(&target.url).await.unwrap();
        let body = response.text().await.unwrap();

        // Check for CSRF token in forms
        if !body.contains("csrf_token") && !body.contains("_token") {
            vulnerabilities.push(Vulnerability {
                name: "Potential CSRF Vulnerability".to_string(),
                description: "No CSRF token found in the HTML forms. This may indicate a lack of CSRF protection.".to_string(),
                severity: "High".to_string(),
                url: target.url.clone(),
            });
        }

        // Check for SameSite cookie attribute
        let headers = response.headers();
        if let Some(cookie_header) = headers.get("Set-Cookie") {
            if let Ok(cookie_str) = cookie_header.to_str() {
                if !cookie_str.contains("SameSite=Strict") && !cookie_str.contains("SameSite=Lax") {
                    vulnerabilities.push(Vulnerability {
                        name: "Missing SameSite Cookie Attribute".to_string(),
                        description: "Cookies are set without the SameSite attribute, which may make the site more vulnerable to CSRF attacks.".to_string(),
                        severity: "Medium".to_string(),
                        url: target.url.clone(),
                    });
                }
            }
        }

        vulnerabilities
    }
}
