use crate::models::{Target, Vulnerability};
use crate::utils::http_client::HttpClient;
use async_trait::async_trait;

pub struct SqlInjectionScanner;

#[async_trait]
impl super::VulnerabilityCheck for SqlInjectionScanner {
    async fn check(
        &self,
        target: &Target,
        client: &HttpClient,
    ) -> Vec<Vulnerability> {
        let mut vulnerabilities = Vec::new();

        // basic sql injection payloads
        let payloads = vec![
            "' OR '1' = '1",
            "' OR 1=1--",
            "' UNION SELECT NULL--",
            "admin '--",
        ];

        for payload in payloads {
            let url = format!(
                "{}:{}",
                target.url,
                payload,
            );

            let response = client
                .get(&url)
                .await
                .unwrap();

            if response
                    .status()
                    .is_success() && 
                response
                    .text()
                    .await
                    .unwrap()
                    .contain("error in you SQL syntax") {
                        vulnerabilities.push(Vulnerability {
                            name: "SQL Injection".to_string(),
                            description: format!(
                                "Possible SQL Injection vulnerability found with your payload: {}",
                                payload,
                            ),
                            severity: "High".to_string(),
                            url: url.clone(),
                        });
            }
        }

        vulnerabilities
    }
}
