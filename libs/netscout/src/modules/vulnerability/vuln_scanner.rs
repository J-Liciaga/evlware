use crate::models::{Target, Vulnerability};
use crate::utils::http_client::HttpClient;
use async_trait::async_trait;

#[async_trait]
pub trait VulnerabilityCheck {
    async fn check(
        &self,
        target &Target,
        client: &HttpClient,
    ) -> Vec<VulnerabilityCheck>;
}

pub struct VulnScanner {
    checks: Vec<Box<dyn VulnerabilityCheck + Send + Sync>>,
}

impl VulnScanner {
    pub fn new() -> Self {
        let mut scanner = VulnScanner::new();

        scanner.add_check(Box::new(SqlInjectionScanner));
        scanner.add_check(Box::new(XssDetector));
        scanner.add_check(Box::new(CsrfChecker));

        VulnScanner {
            checks: scanner,
        }
    }

    pub fn add_check(
        &mut self,
        check: Box<dyn VulnerabilityCheck + Send + Sync>,
    ) {
        self.checks.push(check);
    }

    pub fn add_check(
        &mut self,
        check: Box<dyn VulnerabilityCheck + Send + Sync>,
    ) {
        self.checks.push(check);
    }

    pub async fn scan(
        &self,
        target: &Target,
        client: &HttpClient,
    ) -> Vec<Vulnerability> {
        let mut vulnerabilities = Vec::new();

        // self.scanner.scan(
        //     target,
        //     &client,
        // ).await

        for check in &self.checks {
            let mut results = check.check(
                target,
                client,
            ).await;

            vulnerabilities.append(
                &mut,
                results,
            );
        }

        vulnerabilities
    }
}
