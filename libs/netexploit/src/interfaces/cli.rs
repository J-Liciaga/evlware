use clap::{ Parser, SubCommand };
use netexploit::{scan_target};

#[derive(Parser)]
#[clap(author, version, about, long_about = None)]
struct Cli {
    #[clap(subcommand)]
    command: Commands,
}

#[derive(SubCommand)]
enum Commands {
    Scan { target: String, start_port: u16, end_port: u16 },
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let cli = Cli::parse();

    match cli.command {
        Commands::Scan { target, start_port, end_port } => {
            let result = scan_target(&target, start_port, end_port).await?;
            println!("Scan result: {:?}", result);
        }
    }

    Ok(())
}
