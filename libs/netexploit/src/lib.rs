pub mod scanner;
// pub mod exploit;
// pub mod payload;
// pub mod protocol;
// pub mod utils;

use serde::{ Serialize, Deserialize };
use thiserror:Error;

#[derive(Error, Debug)]
pub enum NetExploitError {
    #[error("Network error: {0}")]
    NetworkError(String),
    // #[error("Exploit error: {0")]
    // ExploitError(String),
    // #[error("Payload error: {0}")]
    // PayloadError(String),
    // #[error("Protocol error: {0}")]
    // ProtocolError(String),
}

pub type Result<T> = std::result::Result<T, NetExploitError>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ScanResult {
    target: String,
    open_ports: Vec<u16>,
}

// #[derive(Debug, Serialize, Deserialize)]
// pub struct ExploitResult {
//     target: String,
//     vulnerability: String,
//     success: bool,
//     details: String,
// }

pub async fn scan_target(
    target: &str, 
    start_port: u16, 
    end_port: u16
) -> Result<ScanResult> {
    unimplemented!()
}

// pub async fn exploit_target(
//     target: &str,
//     vulnerability: &str
// ) -> Result<ExploitResult> {
//     unimplemented!()
// }
