use clap::{ App, Arg, SubCommand };
use netexploit::{
    scanner::PortScanner
};
use std::net::IpAddr;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error:Error>> {
    let matches = App::new("netexploit")
        .subCommand(SubCommand::with_name("scan"))
            .arg(Arg::with_name("target").required(true))
            .arg(Arg::with_name("start_port").default_value("1")
            .arg(Arg::with_name("end_port").default_value("1024"))
        .get_matches()
    
    match matches.subCommand() {
        ("scan", Some(scan_matches)) => {
            let target: IpAddr = scan_matches.value_of("target").unwrap().parse()?;
            let start_port: u16 = scan_matches.value_of("start_port").unwrap().parse()?;
            let end_port: u16 = scan_matches.value_of("end_port").unwrap().parse()?;

            let scanner = PortScanner::new(100);
            let open_ports = scanner.scan_ports(target, start_port, end_port).await?; 

            println!("Open ports: {:?}", open_ports);
        },
        _ => println!("Invalid command. Use --help for usage information."),
    }

    Ok(())
}
